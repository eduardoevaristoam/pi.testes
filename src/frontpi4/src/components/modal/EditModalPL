import React, { useState, useEffect} from 'react';
import './Modal.css';

function EditModalPL({ Id, isOpen, onClose }) {

  const [playlistName, setPlaylistName] = useState('');
  const [playlistIntervalo, setPlaylistIntervalo] = useState('');
  const [mediaFiles, setMediaFiles] = useState([]);
  const [existingMedia, setExistingMedia] = useState([]);
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState(null);

  const buscaDadosById = async (Id) => {
    try{
      const response = await fetch(`http://localhost:4000/playlists/${Id}`);
      const responseM = await fetch(`http://localhost:4000/playlists/${Id}/media`);
      const data = await response.json();
      const formData = new FormData();
      formData.append("media", media.file)
      setPlaylistName(data.data.nome);
      setPlaylistIntervalo(data.data.intervalo);
      setExistingMedia(data.data.midia)
    }
    catch (error){
      console.error('Erro ao verificar nome da playlist:', error);
    }
  };

  useEffect(() => {
    if (isOpen && Id) {
      buscaDadosById(Id); // Chama a função de busca ao abrir o modal
    }
  }, [isOpen, Id]);

  const checkPlaylistNameExist = async (playlistName) => {
    try{
      const response = await fetch(`http://localhost:4000/playlists`);
      const data = await response.json();
      for(let i = 0; i < data.data.length; i++){
        if(data.data[i].nome === playlistName){
          return true;
        }
      }
    }
    catch (error){
      console.error('Erro ao verificar nome da playlist:', error);
      return false;
    }
  };
  
  const handleSubmit = async (event) => {
    event.preventDefault(); // Evita que a página seja recarregada

    setLoading(true);
    setError(null);

    const nameExists = await checkPlaylistNameExist(playlistName);
    if(nameExists){
      alert('playlist ja cadastrada com este nome.');
      setLoading(false);
      return;
    }

    try {
      const response = await fetch(`http://localhost:4000/playlists/${Id}`, {
        method: 'PATCH',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({ nome: playlistName, intervalo: parseInt(playlistIntervalo,10)}), // Envia o nome do dispositivo
      });


      const data = await response.json();
      if (response.ok) {
        console.log('Playlist atualizada com sucesso:', data);
        setPlaylistName('');
        setPlaylistIntervalo('');
        setMediaFiles([]);
        mediaFiles.forEach((media) => {
          URL.revokeObjectURL(media.preview);
        });
        onClose();
        window.location.reload(); //mudar para algo que só atualize os cadastrados
      } else {
        console.error('Erro ao atualizar playlist:', data.message);
      }
    } catch (error) {
      console.error('Erro na requisição:', error);
    }
    finally{
      setLoading(false);
    }
  };

  return (
    <div className="modal">
      <div className="modal-content">
        <h3>Criar Playlist</h3>
        <form onSubmit={handleSubmit}>
          <label>
            Nome da Playlist:
            <input
              placeholder="Insira nome da playlist"
              type="text" 
              value={playlistName}
              onChange={(e) => setPlaylistName(e.target.value)}
              required
            />
          </label>
          <label>
            Tempo de exibição (segundos):
            <input 
              placeholder="Informe o tempo em segundos"
              type="number" 
              min="1" 
              step="1"
              value={playlistIntervalo}
              onChange={(e) => setPlaylistIntervalo(e.target.value)}
            />
          </label>
          <label>
            Adicionar mídia:
            <input 
              disabled={verInput(playlistName,playlistIntervalo)}
              type="file" 
              name="playlistMedia" 
              multiple
              onChange={handleFileChange}//captura os arquivos ao serem selecionados 
            />
          </label>
          {/* exibindo as minituras das midias */}
          {mediaFiles.length > 0 && (
            <div className="media-preview-container">
              <h4>Mídias selecionadas:</h4>
              <div className="media-thumbnails">
                {mediaFiles.map((media, index) => (
                  <div key={index} className="media-item">
                    {media.file.type.startsWith('image') ? (
                      <img src={media.preview} alt={media.file.name} className="thumbnail" />
                    ) : media.file.type.startsWith('video') ? (
                      <video src={media.preview} controls className="thumbnail" />
                    ) : (
                      <p>Arquivo nao suportado : {media.file.name}</p>
                    )}
                  </div>
                ))}
              </div>
            </div>
          )} 
          <div className="modal-buttons">
            <button type="button" onClick={onClose}>Cancelar</button>
            <button type="submit" disabled={loading}>{loading ? 'Criando...' : 'Criar'}</button>
          </div>
        </form>
      </div>
    </div>
  );
}

export default EditModalPL
